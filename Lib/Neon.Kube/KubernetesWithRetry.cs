//-----------------------------------------------------------------------------
// FILE:	    KubernetesWithRetry.cs.cs
// CONTRIBUTOR: Auto-generated by [prebuilder] tool during pre-build event
// COPYRIGHT:	Copyright (c) 2005-2021 by neonFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: This file is automatically generated during the build.
//          Do not edit this manually.

#pragma warning disable CS1591  // Missing XML comment

using System;
using System.IO;
using System.Linq;
using System.Text;

using k8s;

using Neon.Common;
using Neon.Retry;

namespace Neon.Kube
{
    /// <summary>
    /// Wraps the standard <see cref="Kubernetes"/> class by adding support for an
    /// <see cref="IRetryPolicy"/> for all instance method calls.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This is intended to be a drop-in replacement for the <see cref="Kubernetes"/> class,
    /// adding support for an optional <see cref="IRetryPolicy"/> for all instance method calls.
    /// </para>
    /// <para>
    /// To use, simply instantiate an instance and assign your custom <see cref="IRetryPolicy"/>
    /// to the <see cref="RetryPolicy"/> property.  This property defaults to <see cref="NoRetryPolicy"/>
    /// which means this class will work exactly like the standard <see cref="Kubernetes"/> class.
    /// You may change the retry policy at any time. 
    /// </para>
    /// <note>
    /// Static methods don't honor any retry policy.
    /// </note>
    /// </remarks>
    public sealed class KubernetesWithRetry : IKubernetes, IDisposable
    {
        private Kubernetes      kubernetes;

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient)
        {
            kubernetes = new Kubernetes(config, httpClient);
        }

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
        {
            kubernetes = new Kubernetes(config, httpClient, disposeHttpClient);
        }

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            kubernetes = new Kubernetes(config, handlers);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            kubernetes = new Kubernetes(credentials, handlers);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
        {
            kubernetes = new Kubernetes(credentials, httpClient, disposeHttpClient);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            kubernetes = new Kubernetes(credentials, rootHandler, handlers);
        }

        public KubernetesWithRetry(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            kubernetes = new Kubernetes(baseUri, credentials, handlers);
        }

        public KubernetesWithRetry(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            kubernetes = new Kubernetes(baseUri, credentials, rootHandler, handlers);
        }

        /// <summary>
        /// <para>
        /// The retry policy to be applied public instance method calls.  This may
        /// be modified at anytime and defaults to <see cref="NoRetryPolicy"/>.
        /// </para>
        /// <note>
        /// You may also set this to <c>null</c> which is equivalant to <see cref="NoRetryPolicy"/>.
        /// </note>
        /// </summary>
        public IRetryPolicy RetryPolicy { get; set; } = NoRetryPolicy.Instance;

        /// <summary>
        /// Returns the <see cref="RetryPolicy"/> or <see cref="NoRetryPolicy.Instance"/> when the current policy is <c>null</c>.
        /// </summary>
        private IRetryPolicy NormalizedRetryPolicy => RetryPolicy ?? NoRetryPolicy.Instance;

        /// <inheritdoc/>
        public void Dispose()
        {
             kubernetes.Dispose();
        }

         /// <inheritdoc/>
        public global::System.Uri BaseUri { get; set; }

         /// <inheritdoc/>
        public global::Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

         /// <inheritdoc/>
        public global::Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }

         /// <inheritdoc/>
        public global::Microsoft.Rest.ServiceClientCredentials Credentials { get; }

         /// <inheritdoc/>
        public global::System.Func<global::k8s.WebSocketBuilder> CreateWebSocketBuilder { get; set; }

         /// <inheritdoc/>
        public global::System.Net.Http.HttpClient HttpClient { get; }

         /// <inheritdoc/>
        public global::System.Net.Http.Headers.HttpHeaderValueCollection<global::System.Net.Http.Headers.ProductInfoHeaderValue> UserAgent { get; }

         /// <inheritdoc/>
        public global::System.Collections.Generic.IEnumerable<global::System.Net.Http.HttpMessageHandler> HttpMessageHandlers { get; }

        /// <inheritdoc/>
        public static bool CertificateValidationCallBack(global::System.Object sender, global::System.Security.Cryptography.X509Certificates.X509Certificate2Collection caCerts, global::System.Security.Cryptography.X509Certificates.X509Certificate certificate, global::System.Security.Cryptography.X509Certificates.X509Chain chain, global::System.Net.Security.SslPolicyErrors sslPolicyErrors)
        {
            return global::k8s.Kubernetes.CertificateValidationCallBack(sender, caCerts, certificate, chain, sslPolicyErrors);
        }

        /// <inheritdoc/>
        public static global::Microsoft.Rest.ServiceClientCredentials CreateCredentials(global::k8s.KubernetesClientConfiguration config)
        {
            return global::k8s.Kubernetes.CreateCredentials(config);
        }

        /// <inheritdoc/>
        public static int GetExitCodeOrThrow(global::k8s.Models.V1Status status)
        {
            return global::k8s.Kubernetes.GetExitCodeOrThrow(status);
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodAttachAsync(string name, string @namespace, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WebSocketNamespacedPodAttachAsync(name, @namespace, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCustomObjectScaleWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCustomObjectScaleWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectScaleWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetNamespacedCustomObjectScaleWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterCustomObjectScaleWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterCustomObjectScaleWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectScaleWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetClusterCustomObjectScaleWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterCustomObjectWithHttpMessagesAsync(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetClusterCustomObjectWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCustomObjectStatusWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCustomObjectStatusWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectStatusWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetNamespacedCustomObjectStatusWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ConfigMap>> WatchNamespacedConfigMapAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ConfigMap> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedConfigMapAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Endpoints>> WatchNamespacedEndpointsAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Endpoints> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedEndpointsAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Corev1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Corev1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1LimitRange>> WatchNamespacedLimitRangeAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1LimitRange> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedLimitRangeAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PersistentVolumeClaim>> WatchNamespacedPersistentVolumeClaimAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PersistentVolumeClaim> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedPersistentVolumeClaimAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Pod>> WatchNamespacedPodAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Pod> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedPodAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PodTemplate>> WatchNamespacedPodTemplateAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PodTemplate> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedPodTemplateAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ReplicationController>> WatchNamespacedReplicationControllerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ReplicationController> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedReplicationControllerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ResourceQuota>> WatchNamespacedResourceQuotaAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ResourceQuota> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedResourceQuotaAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Secret>> WatchNamespacedSecretAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Secret> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedSecretAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ServiceAccount>> WatchNamespacedServiceAccountAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ServiceAccount> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedServiceAccountAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Service>> WatchNamespacedServiceAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Service> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedServiceAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Namespace>> WatchNamespaceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Namespace> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespaceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Node>> WatchNodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Node> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PersistentVolume>> WatchPersistentVolumeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PersistentVolume> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPersistentVolumeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1MutatingWebhookConfiguration>> WatchMutatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1MutatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchMutatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ValidatingWebhookConfiguration>> WatchValidatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ValidatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchValidatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> WatchMutatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1MutatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchMutatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> WatchValidatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ValidatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchValidatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CustomResourceDefinition>> WatchCustomResourceDefinitionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CustomResourceDefinition> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCustomResourceDefinitionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CustomResourceDefinition>> WatchCustomResourceDefinitionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CustomResourceDefinition> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCustomResourceDefinitionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1APIService>> WatchAPIServiceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1APIService> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchAPIServiceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1APIService>> WatchAPIServiceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1APIService> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchAPIServiceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ControllerRevision>> WatchNamespacedControllerRevisionAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ControllerRevision> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedControllerRevisionAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1DaemonSet>> WatchNamespacedDaemonSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1DaemonSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedDaemonSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Deployment>> WatchNamespacedDeploymentAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Deployment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedDeploymentAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ReplicaSet>> WatchNamespacedReplicaSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ReplicaSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedReplicaSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1StatefulSet>> WatchNamespacedStatefulSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1StatefulSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedStatefulSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2beta1HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2beta2HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Job>> WatchNamespacedJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Job> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CronJob>> WatchNamespacedCronJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CronJob> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedCronJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2alpha1CronJob>> WatchNamespacedCronJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2alpha1CronJob> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedCronJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CertificateSigningRequest>> WatchCertificateSigningRequestAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CertificateSigningRequest> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCertificateSigningRequestAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CertificateSigningRequest>> WatchCertificateSigningRequestAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CertificateSigningRequest> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCertificateSigningRequestAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Lease>> WatchNamespacedLeaseAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Lease> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedLeaseAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Lease>> WatchNamespacedLeaseAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Lease> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedLeaseAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1EndpointSlice>> WatchNamespacedEndpointSliceAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1EndpointSlice> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedEndpointSliceAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Eventsv1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Eventsv1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Extensionsv1beta1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Extensionsv1beta1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1FlowSchema>> WatchFlowSchemaAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1FlowSchema> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchFlowSchemaAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> WatchPriorityLevelConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1PriorityLevelConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPriorityLevelConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1FlowSchema>> WatchFlowSchemaAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1FlowSchema> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchFlowSchemaAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PriorityLevelConfiguration>> WatchPriorityLevelConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PriorityLevelConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPriorityLevelConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1StorageVersion>> WatchStorageVersionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1StorageVersion> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchStorageVersionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1IngressClass>> WatchIngressClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1IngressClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchIngressClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1NetworkPolicy>> WatchNamespacedNetworkPolicyAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1NetworkPolicy> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedNetworkPolicyAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1IngressClass>> WatchIngressClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1IngressClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchIngressClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Networkingv1beta1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Networkingv1beta1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PodDisruptionBudget>> WatchNamespacedPodDisruptionBudgetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PodDisruptionBudget> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedPodDisruptionBudgetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PodSecurityPolicy>> WatchPodSecurityPolicyAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PodSecurityPolicy> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPodSecurityPolicyAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CSIDriver>> WatchCSIDriverAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CSIDriver> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCSIDriverAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CSINode>> WatchCSINodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CSINode> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCSINodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1StorageClass>> WatchStorageClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1StorageClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchStorageClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CSIDriver>> WatchCSIDriverAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CSIDriver> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCSIDriverAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CSINode>> WatchCSINodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CSINode> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchCSINodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1StorageClass>> WatchStorageClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1StorageClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchStorageClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<int> NamespacedPodExecAsync(string name, string @namespace, string container, global::System.Collections.Generic.IEnumerable<string> command, bool tty, global::k8s.ExecAsyncCallback action, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.NamespacedPodExecAsync(name, @namespace, container, command, tty, action, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Net.Http.Headers.MediaTypeHeaderValue GetHeader(global::System.Object body)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return kubernetes.GetHeader(body);
                });
        }

        /// <inheritdoc/>
        public global::System.Net.Http.Headers.MediaTypeHeaderValue GetHeader(global::k8s.Models.V1Patch body)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return kubernetes.GetHeader(body);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<T>> WatchObjectAsync<T>(string path, string @continue, string fieldSelector, global::System.Nullable<bool> includeUninitialized, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, global::System.Nullable<int> timeoutSeconds, string resourceVersion, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, T> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WatchObjectAsync(path, @continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, timeoutSeconds, resourceVersion, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodExecAsync(string name, string @namespace, string command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WebSocketNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.IStreamDemuxer> MuxedStreamNamespacedPodExecAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<string> command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.MuxedStreamNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodExecAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<string> command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WebSocketNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodPortForwardAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<int> ports, string webSocketSubProtocol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.WebSocketNamespacedPodPortForwardAsync(name, @namespace, ports, webSocketSubProtocol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> ReplaceClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRole2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBinding2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRoleBinding2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBindingList>> ListNamespacedRoleBinding2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRoleBinding2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> CreateNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRoleBinding2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBinding2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRoleBinding2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> ReadNamespacedRoleBinding2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRoleBinding2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> PatchNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRoleBinding2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> ReplaceNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRoleBinding2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRole2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRole2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleList>> ListNamespacedRole2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRole2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> CreateNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRole2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRole2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRole2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> ReadNamespacedRole2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRole2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> PatchNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRole2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> ReplaceNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRole2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBindingList>> ListRoleBindingForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleBindingForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleList>> ListRoleForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup19WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup19WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources38WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources38WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPriorityClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClassList>> ListPriorityClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPriorityClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> CreatePriorityClassWithHttpMessagesAsync(global::k8s.Models.V1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePriorityClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePriorityClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> ReadPriorityClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> PatchPriorityClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> ReplacePriorityClassWithHttpMessagesAsync(global::k8s.Models.V1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources39WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources39WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPriorityClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClassList>> ListPriorityClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPriorityClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> CreatePriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePriorityClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePriorityClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> ReadPriorityClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> PatchPriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> ReplacePriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources40WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources40WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPriorityClass2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClassList>> ListPriorityClass2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPriorityClass2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> CreatePriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePriorityClass2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClass2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePriorityClass2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> ReadPriorityClass2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityClass2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> PatchPriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> ReplacePriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup20WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup20WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources41WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources41WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCSIDriverWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriverList>> ListCSIDriverWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCSIDriverWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> CreateCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCSIDriverWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> DeleteCSIDriverWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCSIDriverWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> ReadCSIDriverWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCSIDriverWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> PatchCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCSIDriverWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> ReplaceCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCSIDriverWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSINodeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCSINodeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINodeList>> ListCSINodeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCSINodeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> CreateCSINodeWithHttpMessagesAsync(global::k8s.Models.V1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCSINodeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> DeleteCSINodeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCSINodeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> ReadCSINodeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCSINodeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> PatchCSINodeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCSINodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> ReplaceCSINodeWithHttpMessagesAsync(global::k8s.Models.V1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCSINodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionStorageClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClassList>> ListStorageClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListStorageClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> CreateStorageClassWithHttpMessagesAsync(global::k8s.Models.V1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateStorageClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> DeleteStorageClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteStorageClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> ReadStorageClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadStorageClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> PatchStorageClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchStorageClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> ReplaceStorageClassWithHttpMessagesAsync(global::k8s.Models.V1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceStorageClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionVolumeAttachmentWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachmentList>> ListVolumeAttachmentWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListVolumeAttachmentWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> CreateVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateVolumeAttachmentWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> DeleteVolumeAttachmentWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteVolumeAttachmentWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReadVolumeAttachmentWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadVolumeAttachmentWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> PatchVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchVolumeAttachmentWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReplaceVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceVolumeAttachmentWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReadVolumeAttachmentStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadVolumeAttachmentStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> PatchVolumeAttachmentStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchVolumeAttachmentStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReplaceVolumeAttachmentStatusWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceVolumeAttachmentStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources42WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources42WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionVolumeAttachment1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachmentList>> ListVolumeAttachment1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListVolumeAttachment1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> CreateVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1alpha1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateVolumeAttachment1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> DeleteVolumeAttachment1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteVolumeAttachment1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> ReadVolumeAttachment1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadVolumeAttachment1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> PatchVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchVolumeAttachment1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> ReplaceVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1alpha1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceVolumeAttachment1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources43WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources43WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCSIDriver1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriverList>> ListCSIDriver1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCSIDriver1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> CreateCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCSIDriver1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> DeleteCSIDriver1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCSIDriver1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> ReadCSIDriver1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCSIDriver1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> PatchCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCSIDriver1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> ReplaceCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCSIDriver1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSINode1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCSINode1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINodeList>> ListCSINode1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCSINode1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> CreateCSINode1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCSINode1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> DeleteCSINode1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCSINode1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> ReadCSINode1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCSINode1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> PatchCSINode1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCSINode1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> ReplaceCSINode1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCSINode1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionStorageClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClassList>> ListStorageClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListStorageClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> CreateStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateStorageClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> DeleteStorageClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteStorageClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> ReadStorageClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadStorageClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> PatchStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchStorageClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> ReplaceStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceStorageClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionVolumeAttachment2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachmentList>> ListVolumeAttachment2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListVolumeAttachment2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> CreateVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1beta1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateVolumeAttachment2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> DeleteVolumeAttachment2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteVolumeAttachment2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> ReadVolumeAttachment2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadVolumeAttachment2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> PatchVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchVolumeAttachment2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> ReplaceVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1beta1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceVolumeAttachment2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse> LogFileListHandlerWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.LogFileListHandlerWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse> LogFileHandlerWithHttpMessagesAsync(string logpath, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.LogFileHandlerWithHttpMessagesAsync(logpath, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<string>> GetServiceAccountIssuerOpenIDKeysetWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetServiceAccountIssuerOpenIDKeysetWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.VersionInfo>> GetCodeWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetCodeWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> CreateNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteCollectionNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ListNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> CreateClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteCollectionClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterCustomObjectWithHttpMessagesAsync(group, version, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ListClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterCustomObjectWithHttpMessagesAsync(group, version, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterCustomObjectStatusWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterCustomObjectStatusWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectStatusWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetClusterCustomObjectStatusWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReadNamespacedIngress2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngress2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> PatchNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngress2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReplaceNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngress2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReadNamespacedIngressStatus2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngressStatus2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> PatchNamespacedIngressStatus2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngressStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReplaceNamespacedIngressStatus2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngressStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup16WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup16WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources31WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources31WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionRuntimeClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClassList>> ListRuntimeClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRuntimeClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> CreateRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateRuntimeClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteRuntimeClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> ReadRuntimeClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadRuntimeClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> PatchRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchRuntimeClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> ReplaceRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceRuntimeClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources32WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources32WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionRuntimeClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClassList>> ListRuntimeClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRuntimeClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> CreateRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateRuntimeClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteRuntimeClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> ReadRuntimeClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadRuntimeClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> PatchRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchRuntimeClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> ReplaceRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceRuntimeClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources33WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources33WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionRuntimeClass2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClassList>> ListRuntimeClass2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRuntimeClass2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> CreateRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateRuntimeClass2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClass2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteRuntimeClass2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> ReadRuntimeClass2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadRuntimeClass2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> PatchRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchRuntimeClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> ReplaceRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceRuntimeClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup17WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup17WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources34WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources34WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudgetList>> ListNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> CreateNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReadNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> PatchNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReplaceNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReadNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> PatchNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReplaceNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudgetList>> ListPodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPodSecurityPolicyWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicyList>> ListPodSecurityPolicyWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPodSecurityPolicyWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> CreatePodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePodSecurityPolicyWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> DeletePodSecurityPolicyWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePodSecurityPolicyWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> ReadPodSecurityPolicyWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPodSecurityPolicyWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> PatchPodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPodSecurityPolicyWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> ReplacePodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePodSecurityPolicyWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup18WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup18WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources35WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources35WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRoleBindingWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBindingList>> ListClusterRoleBindingWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRoleBindingWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> CreateClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRoleBindingWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBindingWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRoleBindingWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> ReadClusterRoleBindingWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRoleBindingWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> PatchClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRoleBindingWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> ReplaceClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRoleBindingWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRoleWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleList>> ListClusterRoleWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRoleWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> CreateClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRoleWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRoleWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> ReadClusterRoleWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRoleWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> PatchClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRoleWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> ReplaceClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRoleWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBindingList>> ListNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> CreateNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> ReadNamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> PatchNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> ReplaceNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleList>> ListNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRoleWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> CreateNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> ReadNamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> PatchNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> ReplaceNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBindingList>> ListRoleBindingForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleBindingForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleList>> ListRoleForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources36WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources36WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRoleBinding1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBindingList>> ListClusterRoleBinding1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRoleBinding1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> CreateClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRoleBinding1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBinding1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRoleBinding1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> ReadClusterRoleBinding1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRoleBinding1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> PatchClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRoleBinding1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> ReplaceClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRoleBinding1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRole1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleList>> ListClusterRole1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRole1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> CreateClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRole1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRole1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRole1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> ReadClusterRole1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRole1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> PatchClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRole1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> ReplaceClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRole1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBinding1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBindingList>> ListNamespacedRoleBinding1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> CreateNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRoleBinding1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBinding1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRoleBinding1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> ReadNamespacedRoleBinding1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRoleBinding1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> PatchNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> ReplaceNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRole1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedRole1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleList>> ListNamespacedRole1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedRole1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> CreateNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedRole1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRole1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedRole1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> ReadNamespacedRole1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedRole1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> PatchNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> ReplaceNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBindingList>> ListRoleBindingForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleBindingForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleList>> ListRoleForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListRoleForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources37WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources37WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRoleBinding2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBindingList>> ListClusterRoleBinding2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRoleBinding2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> CreateClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRoleBinding2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBinding2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRoleBinding2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> ReadClusterRoleBinding2WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRoleBinding2WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> PatchClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRoleBinding2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> ReplaceClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceClusterRoleBinding2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionClusterRole2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleList>> ListClusterRole2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListClusterRole2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> CreateClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateClusterRole2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRole2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteClusterRole2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> ReadClusterRole2WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadClusterRole2WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> PatchClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchClusterRole2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup11WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup11WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources23WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources23WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1EventList>> ListEventForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListEventForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEvent1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedEvent1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1EventList>> ListNamespacedEvent1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedEvent1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> CreateNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.Eventsv1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedEvent1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEvent1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedEvent1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> ReadNamespacedEvent1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedEvent1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> PatchNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedEvent1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> ReplaceNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.Eventsv1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedEvent1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources24WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources24WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EventList>> ListEventForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListEventForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEvent2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedEvent2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EventList>> ListNamespacedEvent2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedEvent2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> CreateNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1beta1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedEvent2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEvent2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedEvent2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> ReadNamespacedEvent2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedEvent2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> PatchNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedEvent2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> ReplaceNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1beta1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedEvent2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup12WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup12WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources25WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources25WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1IngressList>> ListIngressForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListIngressForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedIngressWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1IngressList>> ListNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedIngressWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> CreateNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedIngressWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReadNamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> PatchNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReplaceNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReadNamespacedIngressStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngressStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> PatchNamespacedIngressStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReplaceNamespacedIngressStatusWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup13WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup13WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources26WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources26WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionFlowSchemaWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchemaList>> ListFlowSchemaWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListFlowSchemaWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> CreateFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateFlowSchemaWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteFlowSchemaWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteFlowSchemaWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReadFlowSchemaWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadFlowSchemaWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> PatchFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchFlowSchemaWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReplaceFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceFlowSchemaWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReadFlowSchemaStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadFlowSchemaStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> PatchFlowSchemaStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchFlowSchemaStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReplaceFlowSchemaStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceFlowSchemaStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPriorityLevelConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfigurationList>> ListPriorityLevelConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPriorityLevelConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> CreatePriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePriorityLevelConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityLevelConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePriorityLevelConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityLevelConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityLevelConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityLevelConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityLevelConfigurationStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityLevelConfigurationStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityLevelConfigurationStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources27WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources27WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionFlowSchema1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchemaList>> ListFlowSchema1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListFlowSchema1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> CreateFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateFlowSchema1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteFlowSchema1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteFlowSchema1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReadFlowSchema1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadFlowSchema1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> PatchFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchFlowSchema1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReplaceFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceFlowSchema1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReadFlowSchemaStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadFlowSchemaStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> PatchFlowSchemaStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchFlowSchemaStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReplaceFlowSchemaStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceFlowSchemaStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPriorityLevelConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfigurationList>> ListPriorityLevelConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPriorityLevelConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> CreatePriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePriorityLevelConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityLevelConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePriorityLevelConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReadPriorityLevelConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityLevelConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> PatchPriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityLevelConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReplacePriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityLevelConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPriorityLevelConfigurationStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPriorityLevelConfigurationStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePriorityLevelConfigurationStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup14WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup14WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources28WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources28WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionStorageVersionWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersionList>> ListStorageVersionWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListStorageVersionWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> CreateStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateStorageVersionWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteStorageVersionWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteStorageVersionWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReadStorageVersionWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadStorageVersionWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> PatchStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchStorageVersionWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReplaceStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceStorageVersionWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReadStorageVersionStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadStorageVersionStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> PatchStorageVersionStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchStorageVersionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReplaceStorageVersionStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceStorageVersionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup15WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup15WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources29WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources29WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionIngressClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionIngressClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClassList>> ListIngressClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListIngressClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> CreateIngressClassWithHttpMessagesAsync(global::k8s.Models.V1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateIngressClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteIngressClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteIngressClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> ReadIngressClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadIngressClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> PatchIngressClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchIngressClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> ReplaceIngressClassWithHttpMessagesAsync(global::k8s.Models.V1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceIngressClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressList>> ListIngressForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListIngressForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngress1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedIngress1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressList>> ListNamespacedIngress1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedIngress1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> CreateNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedIngress1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngress1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedIngress1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReadNamespacedIngress1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngress1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> PatchNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngress1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReplaceNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngress1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReadNamespacedIngressStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedIngressStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> PatchNamespacedIngressStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedIngressStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReplaceNamespacedIngressStatus1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedIngressStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicyList>> ListNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> CreateNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1NetworkPolicy body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedNetworkPolicyWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> ReadNamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> PatchNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> ReplaceNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1NetworkPolicy body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicyList>> ListNetworkPolicyForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNetworkPolicyForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources30WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources30WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionIngressClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClassList>> ListIngressClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListIngressClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> CreateIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateIngressClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteIngressClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteIngressClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> ReadIngressClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadIngressClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> PatchIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchIngressClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> ReplaceIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceIngressClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1IngressList>> ListIngressForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListIngressForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngress2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedIngress2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1IngressList>> ListNamespacedIngress2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedIngress2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> CreateNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedIngress2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngress2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedIngress2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources13WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources13WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListHorizontalPodAutoscalerForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources14WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources14WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListHorizontalPodAutoscalerForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup7WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup7WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources15WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources15WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1JobList>> ListJobForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListJobForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedJobWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedJobWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1JobList>> ListNamespacedJobWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedJobWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> CreateNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Job body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedJobWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedJobWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReadNamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> PatchNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReplaceNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReadNamespacedJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> PatchNamespacedJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReplaceNamespacedJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources16WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources16WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJobList>> ListCronJobForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCronJobForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJobList>> ListNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> CreateNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedCronJobWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReadNamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> PatchNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReplaceNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReadNamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedCronJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> PatchNamespacedCronJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReplaceNamespacedCronJobStatusWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources17WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources17WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJobList>> ListCronJobForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCronJobForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedCronJob1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedCronJob1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJobList>> ListNamespacedCronJob1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedCronJob1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> CreateNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedCronJob1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedCronJob1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedCronJob1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReadNamespacedCronJob1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedCronJob1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> PatchNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCronJob1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReplaceNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCronJob1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReadNamespacedCronJobStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedCronJobStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> PatchNamespacedCronJobStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedCronJobStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReplaceNamespacedCronJobStatus1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedCronJobStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup8WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup8WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources18WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources18WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCertificateSigningRequestWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequestList>> ListCertificateSigningRequestWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCertificateSigningRequestWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> CreateCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCertificateSigningRequestWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCertificateSigningRequestWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCertificateSigningRequestWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequestWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequestWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequestWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestApprovalWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequestApprovalWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestApprovalWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestApprovalWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequestStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequestStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestStatusWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequestStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources19WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources19WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCertificateSigningRequest1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequestList>> ListCertificateSigningRequest1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCertificateSigningRequest1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> CreateCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCertificateSigningRequest1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCertificateSigningRequest1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCertificateSigningRequest1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequest1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequest1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequest1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequest1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequestApproval1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequestApproval1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequestApproval1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequestApproval1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequestApproval1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequestApproval1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequestStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCertificateSigningRequestStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequestStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCertificateSigningRequestStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequestStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCertificateSigningRequestStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup9WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup9WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources20WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources20WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LeaseList>> ListLeaseForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListLeaseForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLeaseWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedLeaseWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LeaseList>> ListNamespacedLeaseWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedLeaseWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> CreateNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedLeaseWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLeaseWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedLeaseWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> ReadNamespacedLeaseWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedLeaseWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> PatchNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedLeaseWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> ReplaceNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedLeaseWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources21WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources21WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LeaseList>> ListLeaseForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListLeaseForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLease1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedLease1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LeaseList>> ListNamespacedLease1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedLease1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> CreateNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1beta1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedLease1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLease1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedLease1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> ReadNamespacedLease1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedLease1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> PatchNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedLease1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> ReplaceNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1beta1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedLease1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup10WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup10WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources22WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources22WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSliceList>> ListEndpointSliceForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListEndpointSliceForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEndpointSliceWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedEndpointSliceWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSliceList>> ListNamespacedEndpointSliceWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedEndpointSliceWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> CreateNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1beta1EndpointSlice body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedEndpointSliceWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEndpointSliceWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedEndpointSliceWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> ReadNamespacedEndpointSliceWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedEndpointSliceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> PatchNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedEndpointSliceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> ReplaceNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1beta1EndpointSlice body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedEndpointSliceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources3WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources3WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCustomResourceDefinitionWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinitionList>> ListCustomResourceDefinitionWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCustomResourceDefinitionWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> CreateCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCustomResourceDefinitionWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCustomResourceDefinitionWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCustomResourceDefinitionWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReadCustomResourceDefinitionWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCustomResourceDefinitionWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> PatchCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCustomResourceDefinitionWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReplaceCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCustomResourceDefinitionWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReadCustomResourceDefinitionStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCustomResourceDefinitionStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> PatchCustomResourceDefinitionStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCustomResourceDefinitionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReplaceCustomResourceDefinitionStatusWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCustomResourceDefinitionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources4WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources4WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionCustomResourceDefinition1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinitionList>> ListCustomResourceDefinition1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListCustomResourceDefinition1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> CreateCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateCustomResourceDefinition1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCustomResourceDefinition1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCustomResourceDefinition1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReadCustomResourceDefinition1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCustomResourceDefinition1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> PatchCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCustomResourceDefinition1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReplaceCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCustomResourceDefinition1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReadCustomResourceDefinitionStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadCustomResourceDefinitionStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> PatchCustomResourceDefinitionStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchCustomResourceDefinitionStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReplaceCustomResourceDefinitionStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceCustomResourceDefinitionStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup2WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup2WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources5WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources5WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionAPIServiceWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIServiceList>> ListAPIServiceWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListAPIServiceWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> CreateAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateAPIServiceWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteAPIServiceWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteAPIServiceWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReadAPIServiceWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadAPIServiceWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> PatchAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchAPIServiceWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReplaceAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceAPIServiceWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReadAPIServiceStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadAPIServiceStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> PatchAPIServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchAPIServiceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReplaceAPIServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceAPIServiceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources6WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources6WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionAPIService1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionAPIService1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIServiceList>> ListAPIService1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListAPIService1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> CreateAPIService1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateAPIService1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteAPIService1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteAPIService1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReadAPIService1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadAPIService1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> PatchAPIService1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchAPIService1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReplaceAPIService1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceAPIService1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReadAPIServiceStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadAPIServiceStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> PatchAPIServiceStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchAPIServiceStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReplaceAPIServiceStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceAPIServiceStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup3WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup3WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources7WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources7WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevisionList>> ListControllerRevisionForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListControllerRevisionForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSetList>> ListDaemonSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListDaemonSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DeploymentList>> ListDeploymentForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListDeploymentForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevisionList>> ListNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> CreateNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1ControllerRevision body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedControllerRevisionWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> ReadNamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> PatchNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> ReplaceNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1ControllerRevision body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSetList>> ListNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> CreateNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReadNamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> PatchNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReplaceNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReadNamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> PatchNamespacedDaemonSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReplaceNamespacedDaemonSetStatusWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DeploymentList>> ListNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> CreateNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReadNamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> PatchNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReplaceNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedDeploymentScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedDeploymentScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReadNamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> PatchNamespacedDeploymentStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReplaceNamespacedDeploymentStatusWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSetList>> ListNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> CreateNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReadNamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> PatchNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReplaceNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicaSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedReplicaSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedReplicaSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReadNamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> PatchNamespacedReplicaSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReplaceNamespacedReplicaSetStatusWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSetList>> ListNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> CreateNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReadNamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> PatchNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReplaceNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedStatefulSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedStatefulSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedStatefulSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReadNamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> PatchNamespacedStatefulSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReplaceNamespacedStatefulSetStatusWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSetList>> ListReplicaSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListReplicaSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSetList>> ListStatefulSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListStatefulSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup4WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup4WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources8WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources8WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1TokenReview>> CreateTokenReviewWithHttpMessagesAsync(global::k8s.Models.V1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateTokenReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources9WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources9WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1TokenReview>> CreateTokenReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateTokenReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup5WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup5WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources10WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources10WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LocalSubjectAccessReview>> CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SelfSubjectAccessReview>> CreateSelfSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSelfSubjectAccessReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SelfSubjectRulesReview>> CreateSelfSubjectRulesReviewWithHttpMessagesAsync(global::k8s.Models.V1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSelfSubjectRulesReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SubjectAccessReview>> CreateSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSubjectAccessReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources11WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources11WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LocalSubjectAccessReview>> CreateNamespacedLocalSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedLocalSubjectAccessReview1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SelfSubjectAccessReview>> CreateSelfSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSelfSubjectAccessReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SelfSubjectRulesReview>> CreateSelfSubjectRulesReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSelfSubjectRulesReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SubjectAccessReview>> CreateSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateSubjectAccessReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup6WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup6WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources12WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources12WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListHorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReplaceNamespacedReplicationControllerStatusWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuotaList>> ListNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> CreateNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedResourceQuotaWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> DeleteNamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReadNamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> PatchNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReplaceNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReadNamespacedResourceQuotaStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedResourceQuotaStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> PatchNamespacedResourceQuotaStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReplaceNamespacedResourceQuotaStatusWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedSecretWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SecretList>> ListNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedSecretWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> CreateNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Secret body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedSecretWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> ReadNamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> PatchNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> ReplaceNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Secret body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccountList>> ListNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> CreateNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1ServiceAccount body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedServiceAccountWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> DeleteNamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> ReadNamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> PatchNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> ReplaceNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1ServiceAccount body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Authenticationv1TokenRequest>> CreateNamespacedServiceAccountTokenWithHttpMessagesAsync(global::k8s.Models.Authenticationv1TokenRequest body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedServiceAccountTokenWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceList>> ListNamespacedServiceWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedServiceWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> CreateNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Service body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedServiceWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReadNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> PatchNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReplaceNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReadNamespacedServiceStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedServiceStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> PatchNamespacedServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReplaceNamespacedServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespaceWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespaceWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReadNamespaceWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespaceWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> PatchNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespaceWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespaceWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceFinalizeWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespaceFinalizeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReadNamespaceStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespaceStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> PatchNamespaceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespaceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceStatusWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespaceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNodeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNodeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NodeList>> ListNodeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNodeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> CreateNodeWithHttpMessagesAsync(global::k8s.Models.V1Node body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNodeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNodeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNodeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReadNodeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNodeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> PatchNodeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReplaceNodeWithHttpMessagesAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReadNodeStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNodeStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> PatchNodeStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNodeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReplaceNodeStatusWithHttpMessagesAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNodeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaimList>> ListPersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionPersistentVolumeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeList>> ListPersistentVolumeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPersistentVolumeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> CreatePersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreatePersistentVolumeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> DeletePersistentVolumeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeletePersistentVolumeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReadPersistentVolumeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPersistentVolumeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> PatchPersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPersistentVolumeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReplacePersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePersistentVolumeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReadPersistentVolumeStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadPersistentVolumeStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> PatchPersistentVolumeStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchPersistentVolumeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReplacePersistentVolumeStatusWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplacePersistentVolumeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodList>> ListPodForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPodForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplateList>> ListPodTemplateForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListPodTemplateForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationControllerList>> ListReplicationControllerForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListReplicationControllerForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuotaList>> ListResourceQuotaForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListResourceQuotaForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SecretList>> ListSecretForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListSecretForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccountList>> ListServiceAccountForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListServiceAccountForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceList>> ListServiceForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListServiceForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroupList>> GetAPIVersions1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIVersions1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroupWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroupWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionMutatingWebhookConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfigurationList>> ListMutatingWebhookConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListMutatingWebhookConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> CreateMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateMutatingWebhookConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteMutatingWebhookConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteMutatingWebhookConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> ReadMutatingWebhookConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadMutatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> PatchMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchMutatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> ReplaceMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceMutatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionValidatingWebhookConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfigurationList>> ListValidatingWebhookConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListValidatingWebhookConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> CreateValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateValidatingWebhookConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteValidatingWebhookConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteValidatingWebhookConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> ReadValidatingWebhookConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadValidatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> PatchValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> ReplaceValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources2WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResources2WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionMutatingWebhookConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfigurationList>> ListMutatingWebhookConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListMutatingWebhookConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> CreateMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateMutatingWebhookConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteMutatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteMutatingWebhookConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> ReadMutatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadMutatingWebhookConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> PatchMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchMutatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> ReplaceMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceMutatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionValidatingWebhookConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfigurationList>> ListValidatingWebhookConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListValidatingWebhookConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> CreateValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateValidatingWebhookConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteValidatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteValidatingWebhookConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> ReadValidatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadValidatingWebhookConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> PatchValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchValidatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> ReplaceValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceValidatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIGroup1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<string>> GetServiceAccountIssuerOpenIDConfigurationWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetServiceAccountIssuerOpenIDConfigurationWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIVersions>> GetAPIVersionsWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIVersionsWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResourcesWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.GetAPIResourcesWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ComponentStatusList>> ListComponentStatusWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListComponentStatusWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ComponentStatus>> ReadComponentStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadComponentStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMapList>> ListConfigMapForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListConfigMapForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1EndpointsList>> ListEndpointsForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListEndpointsForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1EventList>> ListEventForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListEventForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRangeList>> ListLimitRangeForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListLimitRangeForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NamespaceList>> ListNamespaceWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespaceWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> CreateNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespaceWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Binding>> CreateNamespacedBindingWithHttpMessagesAsync(global::k8s.Models.V1Binding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedBindingWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMapList>> ListNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> CreateNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1ConfigMap body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedConfigMapWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> ReadNamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> PatchNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> ReplaceNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1ConfigMap body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1EndpointsList>> ListNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> CreateNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Endpoints body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedEndpointsWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> ReadNamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> PatchNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> ReplaceNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Endpoints body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedEventWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1EventList>> ListNamespacedEventWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedEventWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> CreateNamespacedEventWithHttpMessagesAsync(global::k8s.Models.Corev1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedEventWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedEventWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> ReadNamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedEventWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> PatchNamespacedEventWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> ReplaceNamespacedEventWithHttpMessagesAsync(global::k8s.Models.Corev1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRangeList>> ListNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> CreateNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1LimitRange body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedLimitRangeWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> ReadNamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> PatchNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> ReplaceNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1LimitRange body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaimList>> ListNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> CreateNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> DeleteNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReadNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> PatchNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReplaceNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReadNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> PatchNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReplaceNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedPodWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodList>> ListNamespacedPodWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedPodWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> CreateNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPodWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> DeleteNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReadNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> PatchNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReplaceNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Binding>> CreateNamespacedPodBindingWithHttpMessagesAsync(global::k8s.Models.V1Binding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPodBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Eviction>> CreateNamespacedPodEvictionWithHttpMessagesAsync(global::k8s.Models.V1beta1Eviction body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPodEvictionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ReadNamespacedPodLogWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> follow, global::System.Nullable<bool> insecureSkipTLSVerifyBackend, global::System.Nullable<int> limitBytes, string pretty, global::System.Nullable<bool> previous, global::System.Nullable<int> sinceSeconds, global::System.Nullable<int> tailLines, global::System.Nullable<bool> timestamps, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodLogWithHttpMessagesAsync(name, namespaceParameter, container, follow, insecureSkipTLSVerifyBackend, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectDeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectGetNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectHeadNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPatchNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPostNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ConnectPutNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReadNamespacedPodStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> PatchNamespacedPodStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReplaceNamespacedPodStatusWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplateList>> ListNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> CreateNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1PodTemplate body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedPodTemplateWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> DeleteNamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> ReadNamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> PatchNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> ReplaceNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1PodTemplate body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteCollectionNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationControllerList>> ListNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ListNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> CreateNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.CreateNamespacedReplicationControllerWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.DeleteNamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReadNamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> PatchNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReplaceNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedReplicationControllerScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicationControllerScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedReplicationControllerScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedReplicationControllerScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReplaceNamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReadNamespacedReplicationControllerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.ReadNamespacedReplicationControllerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> PatchNamespacedReplicationControllerStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.Invoke(
                async () =>
                {
                    return await kubernetes.PatchNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public void SetRetryPolicy(global::Microsoft.Rest.TransientFaultHandling.RetryPolicy retryPolicy)
        {
            NormalizedRetryPolicy.Invoke(
                () =>
                {
                    kubernetes.SetRetryPolicy(retryPolicy);
                });
        }

        /// <inheritdoc/>
        public bool SetUserAgent(string productName)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return kubernetes.SetUserAgent(productName);
                });
        }

        /// <inheritdoc/>
        public bool SetUserAgent(string productName, string version)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return kubernetes.SetUserAgent(productName, version);
                });
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return kubernetes.ToString();
        }

        /// <inheritdoc/>
        public override bool Equals(global::System.Object obj)
        {
            return kubernetes.Equals(obj);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return kubernetes.GetHashCode();
        }
    }
}
