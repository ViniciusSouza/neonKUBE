<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Activity-ExternalCompletion" -->
<topic id="7defa7c7-1124-464f-bf49-16987d2bb8f0" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Temporal allows normal (non-local) be completed externally.  This can be useful when
          an external system needs to be responsible for completing an operation.  You can
          take advantage of this in your activity implementation by retrieving the 
          <codeEntityReference qualifyHint="false">P:Neon.Temporal.ActivityTask.TaskToken</codeEntityReference>
          from <codeEntityReference qualifyHint="false">P:Neon.Temporal.Activity.Task</codeEntityReference>.
          This is an opaque byte array that identifies the running task.
        </para>
        <para>
          You'll need to persist this somewhere (like a database) that the external system
          has access to and then your activity will call <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.Activity.DoNotCompleteOnReturn</codeEntityReference>
          and then it will return.
        </para>
        <para>
          Temporal will see the <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.Activity.DoNotCompleteOnReturn</codeEntityReference>
          call and no result will be returned to the calling workflow (yet).  Instead, Temporal will wait for the the external
          system to complete the activity by calling <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.TemporalClient.ActivityCompleteByTokenAsync(System.String,System.Object,System.String)</codeEntityReference>,
          or fail the activity via <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.TemporalClient.ActivityErrorByTokenAsync(System.String,System.Exception,System.String)</codeEntityReference>.
          The activity returns to the calling workflow when one of these methods is called.
        </para>
        <para>
          Note that the activity timeouts still apply for externally completed activities.  This means that 
          the external system may need to submit heartbeats to Temporal via
          <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.TemporalClient.ActivityHeartbeatByTokenAsync(System.String,System.Object,System.String)</codeEntityReference>
          when a heartbeat timeout is specified.
        </para>
        <alert class="note">
          <para>
            Activities can also be completed externally by ID.
          </para>
        </alert>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
