<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Activity-Basics" -->
<topic id="6ed1f1f9-cfde-40ed-81d9-e8bfe259f925" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Activities are the workhorses of your workflows.  Activities are used to interact with the outside
          world as well as to perform any compute intensive work.  Cadence workflows must never interact directly
          with the outside world and workflow decision tasks are limited to execution times of 60 seconds or less.
        </para>
        <para>
          Activities are just async methods defined in an activity interface and then implemented in an activity
          class.  Activity interfaces must inherit <codeEntityReference qualifyHint="false">T:Neon.Cadence.IActivity</codeEntityReference>
          and implementations must inherit <codeEntityReference qualifyHint="false">T:Neon.Cadence.ActivityBase</codeEntityReference>
          and implement the activity interface.  You must then register your activity implementation with Cadence
          in your Workflow service.
        </para>
        <para>
          Here's a simple activity definition:
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\Program-BasicActivity-1.cs" region="code" language="c#" tabSize="4"/>
        <para>
          Activity methods can pretty much do whatever they want, including calling REST APIs, querying databases, 
          file and network I/O, as well as creating threads and tasks.  Activities can also indicate their liveliness
          by sending heartbeats to Cadence along with optional checkpoint information that a subsequent run of the
          activity can use to start where the last run left off.
        </para>
        <para>
          Activities can call <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Activity.RecordHeartbeatAsync(System.Byte[])</codeEntityReference>
          or <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Activity.HeartbeatAsync(System.Func{System.Byte[]},System.Nullable{System.TimeSpan})</codeEntityReference>
          to record heartbeats.  The first method always transmits the heartbeat and should be used when you are recording checkpoint
          information.  The second method is handy when you're just heartbeating to indicate that the activity is still alive.
        </para>
        <para>
          You'll typically specify a heartbeat timeout for activities that are going to run for a while (more than a minute or two).
          This can be specified via <codeEntityReference qualifyHint="false">T:Neon.Cadence.ActivityOptions</codeEntityReference>
          when the activity is started or via <codeEntityReference qualifyHint="false">P:Neon.Cadence.ActivityMethodAttribute.HeartbeatTimeoutSeconds</codeEntityReference>
          tagging the activity method.  You'll need to record a heartbeat within this timeout internal to prevent Cadence from
          thinking the activity has crashed and rescheduling your activity.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Cadence</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
