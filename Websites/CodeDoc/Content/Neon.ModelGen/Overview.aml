<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.ModelGen-Overview" -->
<topic id="2962db0e-03c4-4a07-b8f8-807825db6863" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section address="summary">
      <content>
        <alert class="warning">
          <para>
            This is still a work in progress.  The <legacyBold>INotifyPropertyChanged</legacyBold>
            and REST client generation support works now but the round-trip functionally doesn't work yet.
          </para>
        </alert>
        <para>
          The <b>Neon.ModelGenerator</b> package is designed to convert compiled .NET interface
          definitions into data model classes that can support round-trip data transmission without 
          loss in many common scenarios providing a way to help future-proof your applications.
          This also can support generating the boilerplate code implementing 
          <legacyBold>INotifyPropertyChanged</legacyBold> for UX applications a well
          as generating REST service clients.
        </para>
        <para>
          The essential idea here is that you'll define your data and service models as
          classes, structs, and enumerations in one or more model definition libraries in your solution
          and then use the <b>neon-modelgen</b> tool included in the <b>Neon.ModelGenerator</b> 
          package to reflect the types from your model definition libraries into source files
          that will be then compiled into your model library.
        </para>
        <para>
          After referencing this package in your project, you'll need to manually edit
          your project file adding <codeInline>GeneratePathProperty=true</codeInline> to the\
          package reference and then add a build target to call <b>neon-modelgen</b> to have
          it generate the model source code.
        </para>
        <list class="ordered">
          <listItem>
            <para>
              <b>Add <codeInline>GeneratePathProperty=true</codeInline> to your package reference:</b>
            </para>
            <code source="Content/Neon.ModelGen/Snippet.GeneratePathProperty.xml" language="xml" tabSize="2"/>
            <para>
              Adding this causes MSBuild to define the <codeInline>$(PkgNeon_ModelGenerator)</codeInline> variable
              which will reference the directory where the package is persisted in your
              workstation's global package cache, as described here:
              <externalLink>
                <linkText>Reference Cached Package Contents</linkText>
                <linkUri>https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#generatepathproperty</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              Add a pre-build target that uses <b>neon-modelgen</b> to generate your models:
            </para>
            <code source="Content/Neon.ModelGen/Snippet.PrebuildTarget.xml" language="xml" tabSize="2"/>
            <para>
              This example executes the <b>win-x64</b> version of <b>neon-modelgen</b> located in the cached package
              directory, having it read model definitions from <b>foo.dll</b> and write the generated models 
              to <b>foo.cs</b>.  Note that you'll generally reference the source assembly from another project's
              build output and you'll need to configure your build dependencies such that the source
              project builds first.
            </para>
            <para>
              We add surround the command path with <b>&amp;quot;</b> to handle the case where path may include
              spaces.  The <b>$(PkgNeon_ModelGenerator)</b> variable will expand into a reference to the folder
              where the package is cached.  The remaining path references a specific build of <b>neon-modelgen</b>.              
            </para>
            <para>
              The <b>Neon.ModelGenerator</b> package includes three versions <b>neon-modelgen</b> for 
              <b>linux-x64</b>, <b>osx-x64</b> and <b>win-x64</b>.  You need to select the correct one for 
              your build environment by editing the last directory name.
            </para>
          </listItem>
        </list>
        <para>
          Here's some documentation for the underlying model generator class as well as the <b>neon-modelgen</b>
          command line tool itself:
        </para>
        <para>
            <externalLink>
              <linkText>ModelGen Reference</linkText>
              <linkUri>https://doc.neonkube.com/Neon.ModelGen-Overview.htm</linkUri>
            </externalLink>
        </para>
        <code source="Content/Neon.ModelGen/Snippet.NeonModelGenHelp.txt" language="none" tabSize="4"/>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.ModelGen</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
