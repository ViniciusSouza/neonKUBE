<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Common-Overview" -->
<topic id="8d4cab22-393a-468a-96fe-41870fa99b32" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <introduction>
      <para>
        The <legacyBold>Neon.Common</legacyBold> class library is built for NETStandard 2.0.
        It's relatively small and includes miscellaneous types that are useful on their own
        and are also required by other Neon projects.  This is suitable for including in all
        .NET Core and .NET Framework projects including Xamarin.  Here's a link to the 
        namespace documentation:
      </para>
      <para>
        <codeEntityReference qualifyHint="false">N:Neon.Common</codeEntityReference>
      </para>
      <alert class="warning">
        <para>
          This class library has not been tested for Windows UWP applications so you
          may run into problems in this environment.
        </para>
      </alert>
    </introduction>

    <section address="Namespaces">
      <title>Namespaces</title>
      <content>
        <table>
          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Collections</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes a handful of collection classes.  Some of these were written before
                Microsoft added equivalent collections to the standard .NET libraries.  We're keeping these
                for backwards compatability.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Common</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace hosts the bulk of the common types.  <codeEntityReference qualifyHint="false">T:Neon.Common.NeonHelper</codeEntityReference>
                exposes a ton of handy utility methods ranging from JSON/YAML serialization helpers, compression
                methods, and platform detection to process execution helpers.  This class might have been better
                organized as several classes but it just evolved this way.  Other handy types include 
                <codeEntityReference qualifyHint="false">T:Neon.Common.SemanticVersion</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Common.CommandLine</codeEntityReference>, and
                <codeEntityReference qualifyHint="false">T:Neon.Common.ServiceContainer</codeEntityReference>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Csv</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes classes for reading and writing Comma Separated Value (CSV) files:
                <codeEntityReference qualifyHint="false">T:Neon.Csv.CsvReader</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Csv.CsvWriter</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Csv.CsvTableReader</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Csv.CsvTableWriter</codeEntityReference>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Data</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes some type converters as well as some interfaces and classes
                used by classes created by <legacyBold>ModelGen</legacyBold>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Diagnostics</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes a simple logger suitable -out-of-the-box for typical containerized applications.
                The key types are <codeEntityReference qualifyHint="false">T:Neon.Diagnostics.LogManager</codeEntityReference> and
                <codeEntityReference qualifyHint="false">T:Neon.Diagnostics.INeonLogger</codeEntityReference>.  These
                classes are referenced throughout Neon libraries and services for simplicity.  It is possible to
                replace the underlying logging mechanism with custom code or another logger if required.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.IO</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes a few I/O related classes, including <codeEntityReference qualifyHint="false">T:Neon.IO.TempFile</codeEntityReference>
                and <codeEntityReference qualifyHint="false">T:Neon.IO.TempFolder</codeEntityReference> that provide
                a convienent way to manage temporary files and folder (especially for unit testing).  
                <codeEntityReference qualifyHint="false">T:Neon.IO.LinuxPath</codeEntityReference> provide
                a way to maniplate Linux style paths from Windows (e.g. when a Windows machine is performing
                operations to a remote Linux computer via SSH).  <codeEntityReference qualifyHint="false">T:Neon.IO.LinuxPermissions</codeEntityReference>
                abstracts Linux file permissions.  
              </para>
              <para>
                <codeEntityReference qualifyHint="false">T:Neon.IO.PreprocessReader</codeEntityReference> is a lightweight
                text file prepreprocessor that supports inline statements like <codeInline>#define</codeInline>,
                <codeInline>#if</codeInline>, <codeInline>#switch</codeInline> as well as supporting simple
                macro subsititution.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.ModelGen</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                Neon <legacyBold>ModelGen</legacyBold> combines the <legacyBold>Neon.ModelGen</legacyBold>
                class library with a command line tool to convert interface definitions into usable classes,
                adding required boilerplate to handle Couchbase persistance and queries as well as 
                <codeEntityReference qualifyHint="false">T:System.ComponentModel.INotifyPropertyChanged</codeEntityReference>
                supporting data binding in user interfaces.  <legacyBold>ModelGen</legacyBold> can
                also generate REST clients for web services.
            </para>
              <para>
                The <legacyBold>Neon.Common</legacyBold> library includes attribute classes are used
                to decorate your model interface definitions to specify verious options.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Net</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes <codeEntityReference qualifyHint="false">T:Neon.Net.NetHelper</codeEntityReference>
                which provides utility methods for things like validating DNS host names, comparing IP addresses, 
                simple IP address arithmetic, munging the local hosts file, pinging hosts for reachability,
                identifying an connected network interface, along with a few more capabilities.
              </para>
              <para>
                Other handy types are: <codeEntityReference qualifyHint="false">T:Neon.Net.JsonClient</codeEntityReference>
                which wraps <codeEntityReference qualifyHint="false">T:System.Net.Http.HttpClient</codeEntityReference>
                with features suitable for calling a JSON based REST API.  <codeEntityReference qualifyHint="false">T:Neon.Net.NetworkCidr</codeEntityReference>
                allows you to reason about network subnets, <codeEntityReference qualifyHint="false">T:Neon.Net.Pinger</codeEntityReference>
                an thread-safe alternative to the standard .NET <codeEntityReference qualifyHint="false">T:System.Net.NetworkInformation.Ping</codeEntityReference>
                class, <codeEntityReference qualifyHint="false">T:Neon.Net.HttpException</codeEntityReference> and
                <codeEntityReference qualifyHint="false">T:Neon.Net.NetworkPorts</codeEntityReference>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Retry</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace includes types used for specifying retry policies, including:
                <codeEntityReference qualifyHint="false">T:Neon.Retry.ExponentialRetryPolicy</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Retry.LinearRetryPolicy</codeEntityReference> and
                <codeEntityReference qualifyHint="false">T:Neon.Retry.TransientDetector</codeEntityReference>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Service</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace provides a way to specify a collection of services available to production
                and test applications via a <codeEntityReference qualifyHint="false">T:Neon.Service.ServiceMap</codeEntityReference>.
                Service maps are used to abstract the remote network endpoints consumed by a service or application
                to make it easy to do real end-to-end testing in the debugger or as unit tests as well as to
                run the same code in production with just a configuration change.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Tasks</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                This namespace has several classes that extend traditional thread synchronization primitives
                to <codeInline>async/await</codeInline> code:
                <codeEntityReference qualifyHint="false">T:Neon.Tasks.AsyncAutoResetEvent</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Tasks.AsyncManualResetEvent</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Tasks.AsyncMutex</codeEntityReference>, and
                <codeEntityReference qualifyHint="false">T:Neon.Tasks.AsyncReaderWriterLock</codeEntityReference>.
              </para>
              <para>
                <codeEntityReference qualifyHint="false">T:Neon.Tasks.SyncContext</codeEntityReference>
                provides a very easy way to have async calls to your methods not be marshaled back to the calling
                thread on completion.  This is an alternative to calling <codeInline>Task.ConfigureAwait(false)</codeInline>
                everywhere.  We also provide <codeEntityReference qualifyHint="false">T:Neon.Tasks.AsyncPeriodicTask</codeEntityReference>
                which is essentially a timer with built-in exception handling.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Time</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                The namespace provides various time related utilities like:
                <codeEntityReference qualifyHint="false">T:Neon.Time.GatedTimer</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Time.GoTimeSpan</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Time.PolledTimer</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Time.RecurringTimer</codeEntityReference>,
                <codeEntityReference qualifyHint="false">T:Neon.Time.SysTime</codeEntityReference>, and
                <codeEntityReference qualifyHint="false">T:Neon.Time.TimeOfDay</codeEntityReference>.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para><codeEntityReference qualifyHint="false">N:Neon.Windows</codeEntityReference></para>
            </entry>
            <entry>
              <para>
                Low-level Windows integrations.
              </para>
            </entry>
          </row>

        </table>
      </content>
    </section>

    <section address="Extensions">
      <title>Extensions</title>
      <content>
        <para>
          The <legacyBold>Neon.Common</legacyBold> library also extends a few types from
          standard .NET libraries as well as external JSON/YAML libraries:
        </para>
        <para>
          <codeEntityReference qualifyHint="false">T:Newtonsoft.Json.Linq.JsonExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.AppDomainExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.EnumExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.ExceptionExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.Collections.Generic.IEnumerableExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.RandomExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.ReflectionExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.StringExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.TimeSpanExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.Text.StringBuilderExtensions</codeEntityReference>,
          <codeEntityReference qualifyHint="false">T:System.Net.Http.HttpClientExtensions</codeEntityReference>, and
          <codeEntityReference qualifyHint="false">T:YamlDotNet.RepresentationModel.YamlDotNetExtensions</codeEntityReference>.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Common</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
