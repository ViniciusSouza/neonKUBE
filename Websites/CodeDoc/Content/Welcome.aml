<?xml version="1.0" encoding="utf-8"?>
<topic id="6e0122fd-beb8-4334-9fa2-43a79c330dd9" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>
        Neon/neonKUBE is an open source project released under the MIT license.  This project includes several
        class general purpose libraries published as nuget packages (known as the Neon libraries) as well as 
        a nacent Kubernetes distribution called neonKUBE which is still very much a work in progress.
      </para>
      <para>
        The central theme behind these projects is to fill in some gaps developers encounter
        when developing scalable services intended to be hosted on public cloud providers such as AWS,
        Azure, and Google Cloud, or hosted within in private datacenters.
      </para>
      <para>
        We'll touch on the components below.  Visit the table of contents to to locate more details.
      </para>
      <alert class="note">
        <para>
          All Neon and neonKUBE packages and utilities are available under the 
          <externalLink>
            <linkText>MIT Open Source License</linkText>
            <linkUri>https://opensource.org/licenses/MIT</linkUri>
          </externalLink>.
        </para>
      </alert>
		</introduction>

    <section address="Downloads">
      <title>Downloads and Packages</title>
      <content>
        <para>
          Neon and neonKUBE .NET libraries are available as packages on
          <externalLink>
            <linkText>nuget.org</linkText>
            <linkUri>https://nuget.org</linkUri>
          </externalLink>.
          All packages are currently built as <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline>
        </para>
        <para>
          neonKUBE applications and tools are available on GitGub Releases here:
          <externalLink>
            <linkText>https://github.com/nforgeio/neonKUBE/releases</linkText>
            <linkUri>https://github.com/nforgeio/neonKUBE/releases</linkUri>
          </externalLink>.
          We currently categorize released binaries with one of four levels of
          maturity:
        </para>
        <table>
          <row>
            <entry><para><mediaLinkInline><image xlink:href="release"/></mediaLinkInline></para></entry>
            <entry>
            <para>
              indicates that the release is expected suitable for production use.  Released binary
              versions follow the semantic version 2.0 specification and don't include a pre-release
              identifier.
            </para>
            </entry>
          </row>
          <row>
            <entry><para><mediaLinkInline><image xlink:href="preview"/></mediaLinkInline></para></entry>
            <entry>
            <para>
              indicates that the released binary still has some work in progress but is relatively stable
              and also that we expect that we we'll try to avoid making significant breaking changes to
              the API surface area.  This may be suitable for production but you should take care.
            </para>
            </entry>
          </row>
          <row>
            <entry><para><mediaLinkInline><image xlink:href="alpha"/></mediaLinkInline></para></entry>
            <entry>
            <para>
              indicates that the released binary is not ready for general production use.  There are likely
              to be serious bugs and implementation gaps and it is also very likely that the API may still
              see very significant changes.  We do early <legacyBold>alpha</legacyBold> releases to give
              interested parties a chance to review what we're doing and also so that we and close partners
              can give these a spin in test and sometimes production.
            </para>
            </entry>
          </row>
          <row>
            <entry><para><mediaLinkInline><image xlink:href="internal"/></mediaLinkInline></para></entry>
            <entry>
            <para>
              indicates that the released binary is not intended for general consumption.  These are typically
              referenced by other neonKUBE libaries and tools.
            </para>
            <alert class="warning">
              <para>
                <legacyBold>We reserve the right to change or abandon these components at any time without notice.</legacyBold>
              </para>
            </alert>
            </entry>
          </row>
        </table>
      </content>
    </section>

    <section address="Neon.Cadence">
      <title>Neon.Cadence</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes
          a .NET compatible client for the
          <externalLink>
            <linkText>Uber Cadence</linkText>
            <linkUri>https://cadenceworkflow.io/docs/</linkUri>
          </externalLink> workflow engine.
        </para>
        <para>
          Cadence is a superb workflow engine designed for scale and also for developers
          who enjoy spending their time writing code rather than messing with workflow
          editing software or complex build workflows.  The <legacyBold>Neon.Cadence</legacyBold>
          client combined with the <legacyBold>Uber Cadence Server</legacyBold>, you'll be
          able to author complex workflows in your favorite .NET language.
        </para>
        <para>
          <legacyBold>Neon.Cadence</legacyBold> is supported on 64-bit computers running Windows, OS/X, or Linux.
        </para>
      </content>
    </section>

    <section address="Neon.Common">
      <title>Neon.Common</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes 
          common code used by the other packages as well as classes that may have direct value for your
          projects.  This package is designed to be relatively small and is compatible with all .NET 
          enviromments including Xamarin applications.
        </para>
      </content>
    </section>

    <section address="Neon.Couchbase">
      <title>Neon.Couchbase</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes some extensions and wrapper
          classes that enhance the
          <externalLink>
            <linkText>Couchbase No-SQL Database</linkText>
            <linkUri>https://www.couchbase.com/</linkUri>
          </externalLink> 
        </para>
      </content>
    </section>

    <section address="Neon.Cryptography">
      <title>Neon.Cryptography</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package provides some cryptography related
          classes that make hashing easy as well <codeEntityReference qualifyHint="false">T:Neon.Cryptography.NeonVault</codeEntityReference>
          which provides a general purpose way for encrypting data (inspired by 
          <externalLink>
            <linkText>Ansible Vault</linkText>
            <linkUri>https://docs.ansible.com/ansible/latest/user_guide/vault.html</linkUri>
          </externalLink>.
        </para>
        <para>
          This package is suitable for all environments including Xamarin.
        </para>
      </content>
    </section>

    <section>
      <title>Neon.Kube</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes several 
          classes used for implementing our neonKUBE Kubernetes distribution.  Most developers won't need to 
          reference this directly from their code.
        </para>
      </content>
    </section>

    <section>
      <title>Neon.Service</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes the 
          <codeEntityReference qualifyHint="false">T:Neon.Service.NeonService</codeEntityReference> 
          class which handles a lot of the boilerplate code for a Kubernetes or other services including log integration,
          reacting to termination signals on Linux and OS/X as well as abstracting environment variables and
          configuration file access such that the same service code can run in unit tests as well as production.
        </para>
      </content>
    </section>

    <section>
      <title>Neon.ModelGen</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package is used to automate
          the generation of classes that include 
          <codeEntityReference qualifyHint="false">T:System.ComponentModel.INotifyPropertyChanged</codeEntityReference>
          boilerplate code.    This also can be used to generate classes that implement
          <codeEntityReference qualifyHint="false">T:Neon.Data.IRoundtripData</codeEntityReference> which
          provides a way for classes to be future proofed by being able to round-trip data serialization even when
          data includes properties that are not implemented by the class.
        </para>
        <para>
          ModelGen also supports the generation of REST API clients for web services.
        </para>
        <para>
          You can use these classes to integrate model generation into your own tooling or use the 
          <legacyBold>Neon.ModelGenerator</legacyBold> package which includes the pre-built
          <legacyBold>neon-modelgen</legacyBold> tool that can be referenced by your project
          and executed via a custom build target.
        </para>
      </content>
    </section>

    <section>
      <title>Neon.Nats</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes some extensions and helpers for
          <externalLink>
            <linkText>NATS Open Source Messaging</linkText>
            <linkUri></linkUri>
          </externalLink>.
        </para>
      </content>
    </section>

    <section address="Neon.Temporal">
      <title>Neon.Temporal</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline> This package includes
          a .NET compatible client for the
          <externalLink>
            <linkText>Uber Cadence</linkText>
            <linkUri>https://docs.temporal.io/</linkUri>
          </externalLink> workflow engine.
        </para>
        <para>
          Temporal is a superb workflow engine designed for scale and also for developers
          who enjoy spending their time writing code rather than messing with workflow
          editing software or complex build workflows.  The <legacyBold>Neon.Temporal</legacyBold>
          client combined with the <legacyBold>Temporal Server</legacyBold>, you'll be
          able to author complex workflows in your favorite .NET language.
        </para>
        <para>
          <legacyBold>Neon.Temporal</legacyBold> is supported on 64-bit computers running Windows, OS/X, or Linux.
        </para>
      </content>
    </section>

    <section>
      <title>Neon XUnit packages</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="NETStandard2.0"/></mediaLinkInline>
          Neon provides three nuget packages with Xunit related helpers
          and test fixture implementations.  
        </para>
        <para>
          <legacyBold>Neon.Xunit</legacyBold> includes some Ansible related helpers
          as well a test fixtures for <legacyBold>ASP.NET</legacyBold>, <legacyBold>containers</legacyBold>, <legacyBold>Docker</legacyBold>, 
          <legacyBold>environment variables</legacyBold>, <legacyBold>local DNS hosts</legacyBold>, 
          <codeEntityReference qualifyHint="false">T:Neon.Service.NeonService</codeEntityReference>,
          <legacyBold>NATS Messaging/Streaming</legacyBold>, as well as the
          <codeEntityReference qualifyHint="false">T:Neon.Xunit.ComposedFixture</codeEntityReference>
          that can be used to combine other fixtures.
        </para>
        <para>
          <legacyBold>Neon.Xunit.Cadence</legacyBold> provides a test fixture that
          starts and manages Cadence/Cassendra as a local Docker container while
          unit tests execute.  We use this for testing <legacyBold>Neon.Cadence</legacyBold>
          and we expect workflow developers to do the same until we implement a 
          built-in testing solution like the Java and GO clients have.
        </para>
        <para>
          <legacyBold>Neon.Xunit.Couchbase</legacyBold> provides a test fixture that
          starts and manages Cadence as a local Docker container during unit tests.
        </para>
      </content>
    </section>

    <section>
      <title>neonKUBE Kubernetes Distribution</title>
      <content>
        <para>
          <mediaLinkInline><image xlink:href="alpha"/></mediaLinkInline> We are working on yet another
          Kubernetes Distribution called <legacyBold>neonKUBE</legacyBold>.  The ultimate goal is to
          release an open source, out-of-the-box solution that approaches the capabilities of expensive
          enterprise grade distributions like 
          <externalLink>
            <linkText>OpenShift</linkText>
            <linkUri>https://www.openshift.com/</linkUri>
          </externalLink>
          and similar offerings.
        </para>
        <para>
          This is very much a work in progress and somewhat on the back-burner, but we hope to
          be able to spend some quality time on this beginning Q2 2020.
        </para>
        <alert class="caution">
          <para>
            We are building and releasing some neonKUBE Kubernetes related binaries at this
            time, but they should be considered to be at <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline>
            maturity and should be avoided.
          </para>
        </alert>
      </content>
    </section>

    <section>
      <title>Internal Assemblies and Namespaces</title>
      <content>
        <alert class="warning">
          <para>
            <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline>
            Several Neon assemblies are published to nuget but are intended only for internal
            use by other Neon components.  You should avoid referencing these packages directly 
            in your projects.  We reserve the right to make breaking changes or abondon thesse
            packages without notice.
          </para>
        </alert>
        <para>
          Avoid referencing these internal packages directly.
        </para>
        <list class="nobullet">
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Docker</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.HyperV</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.Aws</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.Azure</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.Google</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.HyperVLocal</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.Machine</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.XenServer</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.XenServer</legacyBold>
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline><image xlink:href="internal"/></mediaLinkInline><legacyBold> Neon.Kube.Xunit</legacyBold>
            </para>
          </listItem>
        </list>
      </content>
    </section>
    
    <relatedTopics>
      <externalLink>
        <linkText>neonKUBE GitHub Repository</linkText>
        <linkUri>https://github.com/nforgeio/neonKUBE</linkUri>
      </externalLink>
      <externalLink>
        <linkText>neonKUBE releases and downloads</linkText>
        <linkUri>https://github.com/nforgeio/neonKUBE/releases</linkUri>
      </externalLink>
      <externalLink>
        <linkText>Semantic Version 2.0 Specification</linkText>
        <linkUri>https://semver.org/</linkUri>
      </externalLink>
      <externalLink>
        <linkText>Uber Cadence</linkText>
        <linkUri>https://cadenceworkflow.io/docs/</linkUri>
      </externalLink>
    </relatedTopics>
	</developerConceptualDocument>
</topic>
